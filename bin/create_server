#!/usr/bin/env ruby

require 'fog'
require 'net/ssh'

NAME = "vpn"
USER = "root"
HOME = USER == "root" ? "/root" : "/home/#{USER}"
FILES = File.expand_path(File.dirname(__FILE__) + '/../files')

unless ENV['RACKSPACE_API_KEY'] and ENV['RACKSPACE_USERNAME']
  puts "RACKSPACE_API_KEY and or RACKSPACE_USERNAME env variable(s) not set"
  exit
end

compute = Fog::Compute.new(:provider           => 'Rackspace',
                           :rackspace_api_key  => ENV['RACKSPACE_API_KEY'],
                           :rackspace_username => ENV['RACKSPACE_USERNAME'])

if server = compute.servers.all.detect{|s| s.name == NAME }
  puts "\n\n#{USER}@#{server.addresses["public"].first} is ready"
else
  server = compute.servers.create(
                                  :flavor_id => 1, # 256MB
                                  :image_id => 49, # Ubuntu 10.04 LTS 64bit
                                  :name => NAME,
                                  :personality => [
                                                   {
                                                     'path' => "#{HOME}/.ssh/authorized_keys",
                                                     'contents' => File.read(File.expand_path("~/.ssh/id_rsa.pub"))
                                                   },
                                                   {
                                                     'path' => "/etc/ssh/sshd_config",
                                                     'contents' => File.read(FILES + '/sshd_config')
                                                   },
                                                   {
                                                     'path' => "/var/lib/misc/bootstrap.sh",
                                                     'contents' => File.read(FILES + '/bootstrap.sh')
                                                   }
                                                  ]
                                  )
  puts "Creating #{server.name} (#{compute.images.get(server.image_id).name} #{compute.flavors.get(server.flavor_id).name})"
  server.wait_for { ready? }

  Net::SSH.start(server.addresses["public"].first, USER) do |ssh|
    ssh.exec!("/bin/bash /var/lib/misc/bootstrap.sh") do |channel, stream, data|
      print data
    end
  end

  puts "\n\n#{USER}@#{server.addresses["public"].first} is ready"
end
